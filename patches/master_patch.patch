diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index c649018a7a0aeb20caeb2bf37c60d57c48630f1b..9a320d8b5f46f2c7f2d269b7a1cc3b2cf91c07a7 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -18,5 +18,5 @@ declare_args() {
 if (is_chrome_branded) {
   branding_path_component = "google_chrome"
 } else {
-  branding_path_component = "chromium"
+  branding_path_component = "brave"
 }
diff --git a/build/vs_toolchain.py b/build/vs_toolchain.py
index 93a04ceb27d04671efddc245fc4e57ec388112da..683d6dce475462785fd365e373ca090de88e9799 100755
--- a/build/vs_toolchain.py
+++ b/build/vs_toolchain.py
@@ -153,6 +153,7 @@ def DetectVisualStudioPath():
     # For now we use a hardcoded default with an environment variable override.
     for path in (
         os.environ.get('vs2017_install'),
+        r'C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise',
         r'C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional',
         r'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community'):
       if path and os.path.exists(path):
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index cf36e40ee5426464cee670a11128a0e11ca49efd..1ddd819e9f7fc33515281035ce6488a0813b36a1 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -253,6 +253,8 @@ if (!is_android && !is_mac) {
           "app/chrome_main.cc",
           "app/chrome_main_delegate.cc",
           "app/chrome_main_delegate.h",
+          "//brave/app/brave_main_delegate.cc",
+          "//brave/app/brave_main_delegate.h",
         ]
 
         deps += [
@@ -375,6 +377,8 @@ if (is_win) {
       "app/chrome_main.cc",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
+      "//brave/app/brave_main_delegate.cc",
+      "//brave/app/brave_main_delegate.h",
       "app/chrome_main_mac.h",
       "app/chrome_main_mac.mm",
     ]
@@ -488,6 +492,8 @@ if (is_win) {
         "app/chrome_main.cc",
         "app/chrome_main_delegate.cc",
         "app/chrome_main_delegate.h",
+        "//brave/app/brave_main_delegate.cc",
+        "//brave/app/brave_main_delegate.h",
       ]
 
       configs += [ "//build/config/compiler:wexit_time_destructors" ]
@@ -557,7 +563,9 @@ if (is_win) {
 } else if (is_mac) {
   chrome_helper_name = chrome_product_full_name + " Helper"
   chrome_framework_name = chrome_product_full_name + " Framework"
-  chrome_framework_version = "A"
+  # TODO(bridiver) - not sure why this has to be commented out, but otherwise
+  # it puts the framework in the wrong place for chrome_exe_main_mac.cc
+  # chrome_framework_version = "A"
 
   group("chrome") {
     deps = [
@@ -672,7 +680,7 @@ if (is_win) {
     args =
         [
           "-b",
-          "${branding_path_component}_strings",
+          _strings_file,
           "-v",
           rebase_path(chrome_version_file, root_build_dir),
           "-g",
@@ -1173,6 +1181,8 @@ if (is_win) {
       "app/chrome_main.cc",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
+      "//brave/app/brave_main_delegate.cc",
+      "//brave/app/brave_main_delegate.h",
       "app/chrome_main_mac.h",
       "app/chrome_main_mac.mm",
     ]
@@ -1416,6 +1426,7 @@ if (is_win) {
 
 group("browser_dependencies") {
   public_deps = [
+    "//brave:browser_dependencies",
     "//chrome/browser",
     "//chrome/common",
     "//components/sync",
@@ -1452,6 +1463,7 @@ group("browser_dependencies") {
 
 group("child_dependencies") {
   public_deps = [
+    "//brave:child_dependencies",
     "//chrome/browser/devtools",
     "//chrome/child",
     "//chrome/common",
@@ -1739,6 +1751,8 @@ if (is_android) {
       "app/android/chrome_main_delegate_android.h",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
+      "//brave/app/brave_main_delegate.cc",
+      "//brave/app/brave_main_delegate.h",
     ]
 
     include_dirs = [ android_ndk_include_dir ]
diff --git a/chrome/app/BUILD.gn b/chrome/app/BUILD.gn
index f85f3d75cf76d8861a1f57ce9b799d60e830e878..0275be6c254d7cce443913ddc7f1fab14ff4dcc0 100644
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -243,7 +243,7 @@ grit("google_chrome_strings") {
 }
 
 grit("chromium_strings") {
-  source = "chromium_strings.grd"
+  source = "${branding_path_component}_strings.grd"
   defines = chrome_grit_defines
   output_dir = "$root_gen_dir/chrome"
   outputs = [
diff --git a/chrome/app/chrome_main.cc b/chrome/app/chrome_main.cc
index e05f30380d9d06fb15a7922aead3f4f82abbe9f1..5464cf08b360bce105d4ece3d7b6e29a522f5849 100644
--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -7,6 +7,7 @@
 #include "base/callback_helpers.h"
 #include "base/command_line.h"
 #include "base/time/time.h"
+#include "brave/app/brave_main_delegate.h"
 #include "build/build_config.h"
 #include "chrome/app/chrome_main_delegate.h"
 #include "chrome/common/chrome_switches.h"
@@ -60,7 +61,7 @@ int ChromeMain(int argc, const char** argv) {
   install_static::InitializeFromPrimaryModule();
 #endif
 
-  ChromeMainDelegate chrome_main_delegate(
+  BraveMainDelegate chrome_main_delegate(
       base::TimeTicks::FromInternalValue(exe_entry_point_ticks));
   content::ContentMainParams params(&chrome_main_delegate);
 
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 27e5f84cb1f06d0a1cd766beace97d5b20317928..23841a71e3e7060727dab6f47b90356cb985f733 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1760,6 +1760,7 @@ split_static_library("browser") {
     "//ui/strings",
     "//ui/surface",
     "//ui/web_dialogs",
+    "//brave/browser:browser_process",
   ]
 
   # Android does in-process PAC, so must link against V8 directly. Other
diff --git a/chrome/browser/browser_process.h b/chrome/browser/browser_process.h
index 77cd9e948514e875e636da465f60136ebd510491..fd587778baca0a6885dd143f6ad390d28bb27af8 100644
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -47,6 +47,10 @@ namespace safe_browsing {
 class SafeBrowsingService;
 }
 
+namespace brave_shields {
+class BaseBraveShieldsService;
+}
+
 namespace subresource_filter {
 class ContentRulesetService;
 }
@@ -271,6 +275,10 @@ class BrowserProcess {
 
   virtual net_log::ChromeNetLog* net_log() = 0;
 
+  virtual brave_shields::BaseBraveShieldsService* ad_block_service() = 0;
+  virtual brave_shields::BaseBraveShieldsService*
+    tracking_protection_service() = 0;
+
   virtual component_updater::ComponentUpdateService* component_updater() = 0;
 
   virtual CRLSetFetcher* crl_set_fetcher() = 0;
diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
index 675e9220b5fe7b71240ac28ab4e4fb97fae6fd96..cb961a10f3bfa61bfc15344e3c635a835b16f121 100644
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -34,7 +34,11 @@
 #include "base/time/default_clock.h"
 #include "base/time/default_tick_clock.h"
 #include "base/trace_event/trace_event.h"
+#include "brave/components/brave_shields/browser/brave_resource_dispatcher_host_delegate.h"
+#include "brave/common/extensions/brave_extensions_client.h"
 #include "build/build_config.h"
+#include "brave/components/brave_shields/browser/ad_block_service.h"
+#include "brave/components/brave_shields/browser/tracking_protection_service.h"
 #include "chrome/browser/chrome_browser_main.h"
 #include "chrome/browser/chrome_child_process_watcher.h"
 #include "chrome/browser/chrome_content_browser_client.h"
@@ -264,7 +268,7 @@ BrowserProcessImpl::BrowserProcessImpl(
       base::MakeRefCounted<extensions::EventRouterForwarder>();
 
   extensions::ExtensionsClient::Set(
-      extensions::ChromeExtensionsClient::GetInstance());
+      extensions::BraveExtensionsClient::GetInstance());
 
   extensions_browser_client_ =
       base::MakeUnique<extensions::ChromeExtensionsBrowserClient>();
@@ -954,6 +958,25 @@ net_log::ChromeNetLog* BrowserProcessImpl::net_log() {
   return net_log_.get();
 }
 
+brave_shields::BaseBraveShieldsService*
+BrowserProcessImpl::ad_block_service() {
+  if (ad_block_service_)
+    return ad_block_service_.get();
+
+  ad_block_service_ = brave_shields::AdBlockServiceFactory();
+  return ad_block_service_.get();
+}
+
+brave_shields::BaseBraveShieldsService*
+  BrowserProcessImpl::tracking_protection_service() {
+  if (tracking_protection_service_)
+    return tracking_protection_service_.get();
+
+  tracking_protection_service_ =
+    brave_shields::TrackingProtectionServiceFactory();
+  return tracking_protection_service_.get();
+}
+
 component_updater::ComponentUpdateService*
 BrowserProcessImpl::component_updater() {
   if (component_updater_)
@@ -1004,7 +1027,7 @@ BrowserProcessImpl::supervised_user_whitelist_installer() {
 
 void BrowserProcessImpl::ResourceDispatcherHostCreated() {
   resource_dispatcher_host_delegate_ =
-      base::MakeUnique<ChromeResourceDispatcherHostDelegate>();
+      base::MakeUnique<BraveResourceDispatcherHostDelegate>();
   ResourceDispatcherHost::Get()->SetDelegate(
       resource_dispatcher_host_delegate_.get());
 
diff --git a/chrome/browser/browser_process_impl.h b/chrome/browser/browser_process_impl.h
index 454080193dbbb41b6bea01416f28f210b26aaff0..32f3b3d6df24aeaff24bcb0d13dd55e15f3acc11 100644
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -143,6 +143,9 @@ class BrowserProcessImpl : public BrowserProcess,
 #endif
 
   net_log::ChromeNetLog* net_log() override;
+  brave_shields::BaseBraveShieldsService* ad_block_service() override;
+  brave_shields::BaseBraveShieldsService*
+      tracking_protection_service() override;
   component_updater::ComponentUpdateService* component_updater() override;
   CRLSetFetcher* crl_set_fetcher() override;
   component_updater::PnaclComponentInstaller* pnacl_component_installer()
@@ -164,6 +167,7 @@ class BrowserProcessImpl : public BrowserProcess,
   static void RegisterPrefs(PrefRegistrySimple* registry);
 
  private:
+  friend class BraveBrowserProcessImpl;
   // KeepAliveStateObserver implementation
   void OnKeepAliveStateChanged(bool is_keeping_alive) override;
   void OnKeepAliveRestartStateChanged(bool can_restart) override;
@@ -310,6 +314,10 @@ class BrowserProcessImpl : public BrowserProcess,
   void RestartBackgroundInstance();
 #endif  // defined(OS_WIN) || (defined(OS_LINUX) && !defined(OS_CHROMEOS))
 
+  std::unique_ptr<brave_shields::BaseBraveShieldsService> ad_block_service_;
+  std::unique_ptr<brave_shields::BaseBraveShieldsService>
+      tracking_protection_service_;
+
   // component updater is normally not used under ChromeOS due
   // to concerns over integrity of data shared between profiles,
   // but some users of component updater only install per-user.
diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index d9baddce633a13532837c1948f17d96fd98fad67..5c9169f61028b44194adcef083c427ae684edb6a 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -43,6 +43,7 @@
 #include "base/time/time.h"
 #include "base/trace_event/trace_event.h"
 #include "base/values.h"
+#include "brave/browser/brave_browser_process_impl.h"
 #include "build/build_config.h"
 #include "cc/base/switches.h"
 #include "chrome/browser/about_flags.h"
@@ -961,7 +962,7 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   {
     TRACE_EVENT0("startup",
       "ChromeBrowserMainParts::PreCreateThreadsImpl:InitBrowswerProcessImpl");
-    browser_process_.reset(new BrowserProcessImpl(local_state_task_runner.get(),
+    browser_process_.reset(new BraveBrowserProcessImpl(local_state_task_runner.get(),
                                                   parsed_command_line()));
   }
 
diff --git a/chrome/browser/chrome_content_browser_client.h b/chrome/browser/chrome_content_browser_client.h
index 9361b28fb3ac91e61837d7c707e9f4a9ec73c7c6..c5eee899ae5f42b974645240f17aabeb156a9ec5 100644
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -350,6 +350,7 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
                                  content::BrowserContext* browser_context);
 
  private:
+  friend class BraveContentBrowserClient;
   friend class DisableWebRtcEncryptionFlagTest;
   friend class InProcessBrowserTest;
 
diff --git a/chrome/browser/extensions/tab_helper.cc b/chrome/browser/extensions/tab_helper.cc
index 21cbe22a4480f24c6793ef5c4d1db1d22329bafe..2f57dc0636ab2947a401b9fc11896c83074c2bdf 100644
--- a/chrome/browser/extensions/tab_helper.cc
+++ b/chrome/browser/extensions/tab_helper.cc
@@ -47,6 +47,7 @@
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/frame_navigate_params.h"
 #include "extensions/browser/api/declarative/rules_registry_service.h"
+#include "extensions/browser/extension_api_frame_id_map.h"
 #include "extensions/browser/extension_prefs.h"
 #include "extensions/browser/extension_registry.h"
 #include "extensions/browser/extension_system.h"
@@ -286,6 +287,9 @@ void TabHelper::FinishCreateBookmarkApp(
 
 void TabHelper::RenderFrameCreated(content::RenderFrameHost* host) {
   SetTabId(host);
+  // Look up the extension API frame ID to force the mapping to be cached.
+  // This is needed so that cached information is available for tabId.
+  ExtensionApiFrameIdMap::Get()->CacheFrameData(host);
 }
 
 void TabHelper::DidFinishNavigation(
diff --git a/chrome/chrome_paks.gni b/chrome/chrome_paks.gni
index c9a9a3d95f29f37e17c9c3b1fa6375f21eaf168a..60eace540225d60ddf2f7ddf20bb1e12dc7745c8 100644
--- a/chrome/chrome_paks.gni
+++ b/chrome/chrome_paks.gni
@@ -89,6 +89,7 @@ template("chrome_extra_paks") {
     output = "${invoker.output_dir}/resources.pak"
     sources = [
       "$root_gen_dir/blink/public/resources/blink_resources.pak",
+      "$root_gen_dir/brave/common/extensions/api/brave_api_resources.pak",
       "$root_gen_dir/chrome/browser_resources.pak",
       "$root_gen_dir/chrome/chrome_unscaled_resources.pak",
       "$root_gen_dir/chrome/common_resources.pak",
@@ -116,6 +117,7 @@ template("chrome_extra_paks") {
       "//chrome/common:resources",
       "//components/resources",
       "//content:resources",
+      "//brave/common/extensions/api:resources_grit",
       "//content/browser/tracing:resources",
       "//net:net_resources",
       "//third_party/WebKit/public:resources",
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index 99a3f816756039a628dc3032cbda3971dd415138..2cf32156411bd3a28e8c8096e25dcee5afcf04ad 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING "Brave"
 #if defined(GOOGLE_CHROME_BUILD)
 #define PRODUCT_STRING "Google Chrome"
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING "Brave"
 #else
 #error Unknown branding
 #endif
diff --git a/chrome/common/extensions/api/content_settings.json b/chrome/common/extensions/api/content_settings.json
index 9c0927abbb6127eae9f4e3143f6d508aa9d81f72..2e1df067e514b2c67c86866ed18a97b9eec02697 100644
--- a/chrome/common/extensions/api/content_settings.json
+++ b/chrome/common/extensions/api/content_settings.json
@@ -238,6 +238,16 @@
         "id": "MultipleAutomaticDownloadsContentSetting",
         "type": "string",
         "enum": ["allow", "block", "ask"]
+      },
+      {
+        "id": "BraveAdBlockContentSetting",
+        "type": "string",
+        "enum": ["allow", "block"]
+      },
+      {
+        "id": "BraveTrackingProtectionContentSetting",
+        "type": "string",
+        "enum": ["allow", "block"]
       }
     ],
     "properties": {
@@ -344,6 +354,22 @@
           "automatic-downloads",
           {"$ref":"MultipleAutomaticDownloadsContentSetting"}
         ]
+      },
+      "braveAdBlock": {
+        "$ref": "ContentSetting",
+        "description": "Whether to allow sites to use Brave's ad-block. One of<br><var>allow</var>: Allow sites to use ad-block,<br><var>block</var>: Don't allow sites to use ad-block. <br>Default is <var>allow</var>.<br>The primary URL is the URL of the top-level frame. The secondary URL is not used.",
+        "value": [
+          "braveAdBlock",
+          {"$ref":"BraveAdBlockContentSetting"}
+        ]
+      },
+      "braveTrackingProtection": {
+        "$ref": "ContentSetting",
+        "description": "Whether to allow sites to use Brave's tracking-protection. One of<br><var>allow</var>: Allow sites to use tracking-protection,<br><var>block</var>: Don't allow sites to use tracking-protection. <br>Default is <var>allow</var>.<br>The primary URL is the URL of the top-level frame. The secondary URL is not used.",
+        "value": [
+          "braveTrackingProtection",
+          {"$ref":"BraveTrackingProtectionContentSetting"}
+        ]
       }
     }
   }
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..5ce343302a2ab3a18a9149a33203f5a2fe301b23 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -79,6 +79,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // However, we want the shims to be agnostic to distribution and operate based
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
+    @"Brave": @"Brave",
     @"Chromium": @"Chromium",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 6de49b0d3dcecdd31370a85625c621cdd1935f90..47604d1e11fe40078a828db154a1f25ad5dc1d38 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -231,6 +231,7 @@ class ChromeContentRendererClient : public content::ContentRendererClient {
 #endif
 
  private:
+  friend class BraveContentRendererClient;
   FRIEND_TEST_ALL_PREFIXES(ChromeContentRendererClientTest, NaClRestriction);
   FRIEND_TEST_ALL_PREFIXES(ChromeContentRendererClientTest,
                            ShouldSuppressErrorPage);
diff --git a/chrome/utility/chrome_content_utility_client.h b/chrome/utility/chrome_content_utility_client.h
index c0132fecb0b9e8a91f288d6e6ecaad9dfdbec247..a6e307d6ddcee3ca0f75a91c459a690324ee0f3a 100644
--- a/chrome/utility/chrome_content_utility_client.h
+++ b/chrome/utility/chrome_content_utility_client.h
@@ -35,6 +35,7 @@ class ChromeContentUtilityClient : public content::ContentUtilityClient {
       const NetworkBinderCreationCallback& callback);
 
  private:
+  friend class BraveContentUtilityClient;
   // IPC message handlers.
   using Handlers = std::vector<std::unique_ptr<UtilityMessageHandler>>;
   Handlers handlers_;
diff --git a/components/content_settings/core/browser/content_settings_registry.cc b/components/content_settings/core/browser/content_settings_registry.cc
index fe84151f52ddeabef91f80d618c78aae1e22e10e..660232e228e783bd67079f33293d124de900c839 100644
--- a/components/content_settings/core/browser/content_settings_registry.cc
+++ b/components/content_settings/core/browser/content_settings_registry.cc
@@ -335,6 +335,23 @@ void ContentSettingsRegistry::Init() {
            WebsiteSettingsRegistry::DESKTOP |
                WebsiteSettingsRegistry::PLATFORM_ANDROID,
            ContentSettingsInfo::INHERIT_IF_LESS_PERMISSIVE);
+
+  Register(CONTENT_SETTINGS_TYPE_BRAVEADBLOCK, "braveAdBlock", CONTENT_SETTING_ALLOW,
+           WebsiteSettingsInfo::SYNCABLE,
+           WhitelistedSchemes(kChromeUIScheme, kChromeDevToolsScheme,
+                              kExtensionScheme),
+           ValidSettings(CONTENT_SETTING_ALLOW, CONTENT_SETTING_BLOCK),
+           WebsiteSettingsInfo::TOP_LEVEL_ORIGIN_ONLY_SCOPE,
+           WebsiteSettingsRegistry::ALL_PLATFORMS,
+           ContentSettingsInfo::INHERIT_IF_LESS_PERMISSIVE);
+  Register(CONTENT_SETTINGS_TYPE_BRAVETRACKINGPROTECTION, "braveTrackingProtection", CONTENT_SETTING_ALLOW,
+           WebsiteSettingsInfo::SYNCABLE,
+           WhitelistedSchemes(kChromeUIScheme, kChromeDevToolsScheme,
+                              kExtensionScheme),
+           ValidSettings(CONTENT_SETTING_ALLOW, CONTENT_SETTING_BLOCK),
+           WebsiteSettingsInfo::TOP_LEVEL_ORIGIN_ONLY_SCOPE,
+           WebsiteSettingsRegistry::ALL_PLATFORMS,
+           ContentSettingsInfo::INHERIT_IF_LESS_PERMISSIVE);
 }
 
 void ContentSettingsRegistry::Register(
diff --git a/components/content_settings/core/common/content_settings_types.h b/components/content_settings/core/common/content_settings_types.h
index 6781f84119866016a4610cdfc187b25d82e442e9..196b3accc9cb5f328257fa50116bbf4321cb0d62 100644
--- a/components/content_settings/core/common/content_settings_types.h
+++ b/components/content_settings/core/common/content_settings_types.h
@@ -100,6 +100,8 @@ enum ContentSettingsType {
   CONTENT_SETTINGS_TYPE_ACCESSIBILITY_EVENTS,
 
   CONTENT_SETTINGS_NUM_TYPES,
+  CONTENT_SETTINGS_TYPE_BRAVEADBLOCK,
+  CONTENT_SETTINGS_TYPE_BRAVETRACKINGPROTECTION,
 };
 
 struct ContentSettingsTypeHash {
diff --git a/components/strings/BUILD.gn b/components/strings/BUILD.gn
index a299d38baf7f0c82dad33dc37764eba5db4ba856..218b83b4c65fe269dd4c3e5b7b51aa44fc4119ac 100644
--- a/components/strings/BUILD.gn
+++ b/components/strings/BUILD.gn
@@ -93,7 +93,7 @@ if (is_android) {
 }
 
 grit("components_chromium_strings") {
-  source = "../components_chromium_strings.grd"
+  source = "../components_${branding_path_component}_strings.grd"
   outputs = [
     "grit/components_chromium_strings.h",
   ]
diff --git a/extensions/browser/extension_event_histogram_value.h b/extensions/browser/extension_event_histogram_value.h
index 6b388cec2f2f769ebfec1aced038713932fd8a2e..b6198d06761a701b80d82b1bb6e11b121fa4aa56 100644
--- a/extensions/browser/extension_event_histogram_value.h
+++ b/extensions/browser/extension_event_histogram_value.h
@@ -428,6 +428,10 @@ enum HistogramValue {
   LOCK_SCREEN_DATA_ON_DATA_ITEMS_AVAILABLE,
   WEB_VIEW_INTERNAL_ON_AUDIO_STATE_CHANGED,
   AUTOMATION_INTERNAL_ON_ACTION_RESULT,
+
+  BRAVE_START = 5000,
+  BRAVE_AD_BLOCKED,
+
   // Last entry: Add new entries above, then run:
   // python tools/metrics/histograms/update_extension_histograms.py
   ENUM_BOUNDARY
diff --git a/third_party/widevine/cdm/BUILD.gn b/third_party/widevine/cdm/BUILD.gn
index a3eac59cc2ebdb1f9d2bb7af8a7db0d44ab315a9..11d0c86fb7cdfc1881f563552fb6f5c5abdabae4 100644
--- a/third_party/widevine/cdm/BUILD.gn
+++ b/third_party/widevine/cdm/BUILD.gn
@@ -113,9 +113,10 @@ if (widevine_cdm_binary_files != []) {
     if (is_mac) {
       ldflags = [
         # Not to strip important symbols by -Wl,-dead_strip.
-        "-Wl,-exported_symbol,_PPP_GetInterface",
-        "-Wl,-exported_symbol,_PPP_InitializeModule",
-        "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        # "-Wl,-exported_symbol,_PPP_GetInterface",
+        # "-Wl,-exported_symbol,_PPP_InitializeModule",
+        # "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        "-Wl,-install_name,@loader_path/libwidevinecdm.dylib",
       ]
       #TODO(jrummell) Mac: 'DYLIB_INSTALL_NAME_BASE': '@loader_path',
     } else if (is_posix && !is_mac) {
diff --git a/tools/gritsettings/resource_ids b/tools/gritsettings/resource_ids
index ee0116d1852ba4d7ab0ab65f2ef8a70fc20636de..95ce5b63467872f48c0f6c27c686b53fe9dff316 100644
--- a/tools/gritsettings/resource_ids
+++ b/tools/gritsettings/resource_ids
@@ -33,6 +33,9 @@
   # Chromium strings and Google Chrome strings must start at the same id.
   # We only use one file depending on whether we're building Chromium or
   # Google Chrome.
+  "chrome/app/brave_strings.grd": {
+    "messages": [400],
+  },
   "chrome/app/chromium_strings.grd": {
     "messages": [400],
   },
@@ -133,6 +136,7 @@
   "chrome/test/data/webui_test_resources.grd": {
     "includes": [12850],
   },
+
   # END chrome/ miscellaneous section.
 
   # START components/ section.
@@ -140,6 +144,9 @@
   # Chromium strings and Google Chrome strings must start at the same id.
   # We only use one file depending on whether we're building Chromium or
   # Google Chrome.
+  "components/components_brave_strings.grd": {
+    "messages": [15000],
+  },
   "components/components_chromium_strings.grd": {
     "messages": [15000],
   },
@@ -380,4 +387,7 @@
   # Please read the header and find the right section above instead.
 
   # Resource ids starting at 31000 are reserved for projects built on Chromium.
+  "brave/common/extensions/api/brave_api_resources.grd": {
+    "includes": [31001],
+  },
 }
